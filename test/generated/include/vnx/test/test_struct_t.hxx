
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_test_test_struct_t_HXX_
#define INCLUDE_vnx_test_test_struct_t_HXX_

#include <vnx/Type.h>
#include <vnx/test/package.hxx>


namespace vnx {
namespace test {

struct test_struct_t {
	
	
	vnx::bool_t bool_ = true;
	int8_t char_ = 42;
	int16_t short_ = 1337;
	std::array<int32_t, 3> array_ = {};
	vnx::float64_t double_ = 11.11;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xebf1aa05ed6ef641ull;
	
	test_struct_t() {}
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	static std::shared_ptr<test_struct_t> create();
	std::shared_ptr<test_struct_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const test_struct_t& _value);
	friend std::istream& operator>>(std::istream& _in, test_struct_t& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace vnx
} // namespace test


namespace vnx {

template<>
struct is_equivalent<::vnx::test::test_struct_t> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_vnx_test_test_struct_t_HXX_
