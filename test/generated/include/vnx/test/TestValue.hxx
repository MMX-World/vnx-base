
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_test_TestValue_HXX_
#define INCLUDE_vnx_test_TestValue_HXX_

#include <vnx/test/package.hxx>
#include <vnx/User.hxx>
#include <vnx/Value.h>
#include <vnx/Variant.hpp>
#include <vnx/permission_e.hxx>
#include <vnx/test/test_struct_t.hxx>


namespace vnx {
namespace test {

class TestValue : public ::vnx::Value {
public:
	
	vnx::bool_t bool_ = true;
	int32_t int_ = 1337;
	vnx::float64_t double_ = 1337.7331;
	std::array<vnx::float32_t, 4> array_ = {};
	std::array<::vnx::test::test_struct_t, 2> struct_array_ = {};
	std::array<vnx::optional<int32_t>, 2> tmpl_array_ = {};
	std::string string_ = "test";
	std::tuple<int32_t, vnx::float32_t, vnx::float64_t, std::string> tuple_;
	std::tuple<::vnx::User, ::vnx::User> user_tuple_;
	std::vector<int32_t> vector_;
	std::vector<::vnx::User> user_vector_;
	std::vector<::vnx::Variant> variant_vector_;
	std::vector<::vnx::permission_e> enum_vector_;
	std::vector<std::pair<int32_t, vnx::float32_t>> pair_vector_;
	std::set<std::string> set_;
	std::map<std::string, int32_t> map_;
	::vnx::Variant variant_;
	::vnx::test::test_struct_t struct_;
	::vnx::permission_e enum_ = ::vnx::permission_e::VIEW;
	::vnx::User user_;
	std::shared_ptr<const ::vnx::User> pointer_;
	vnx::optional<int32_t> optional_int_;
	vnx::optional<::vnx::test::test_struct_t> optional_struct_;
	vnx::optional<::vnx::permission_e> optional_enum_;
	vnx::optional<std::vector<std::pair<int32_t, vnx::float32_t>>> optional_vector_;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x8330d2d961c9571cull;
	
	TestValue() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	static std::shared_ptr<TestValue> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const TestValue& _value);
	friend std::istream& operator>>(std::istream& _in, TestValue& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void TestValue::accept_generic(T& _visitor) const {
	_visitor.template type_begin<TestValue>(25);
	_visitor.type_field("bool_", 0); _visitor.accept(bool_);
	_visitor.type_field("int_", 1); _visitor.accept(int_);
	_visitor.type_field("double_", 2); _visitor.accept(double_);
	_visitor.type_field("array_", 3); _visitor.accept(array_);
	_visitor.type_field("struct_array_", 4); _visitor.accept(struct_array_);
	_visitor.type_field("tmpl_array_", 5); _visitor.accept(tmpl_array_);
	_visitor.type_field("string_", 6); _visitor.accept(string_);
	_visitor.type_field("tuple_", 7); _visitor.accept(tuple_);
	_visitor.type_field("user_tuple_", 8); _visitor.accept(user_tuple_);
	_visitor.type_field("vector_", 9); _visitor.accept(vector_);
	_visitor.type_field("user_vector_", 10); _visitor.accept(user_vector_);
	_visitor.type_field("variant_vector_", 11); _visitor.accept(variant_vector_);
	_visitor.type_field("enum_vector_", 12); _visitor.accept(enum_vector_);
	_visitor.type_field("pair_vector_", 13); _visitor.accept(pair_vector_);
	_visitor.type_field("set_", 14); _visitor.accept(set_);
	_visitor.type_field("map_", 15); _visitor.accept(map_);
	_visitor.type_field("variant_", 16); _visitor.accept(variant_);
	_visitor.type_field("struct_", 17); _visitor.accept(struct_);
	_visitor.type_field("enum_", 18); _visitor.accept(enum_);
	_visitor.type_field("user_", 19); _visitor.accept(user_);
	_visitor.type_field("pointer_", 20); _visitor.accept(pointer_);
	_visitor.type_field("optional_int_", 21); _visitor.accept(optional_int_);
	_visitor.type_field("optional_struct_", 22); _visitor.accept(optional_struct_);
	_visitor.type_field("optional_enum_", 23); _visitor.accept(optional_enum_);
	_visitor.type_field("optional_vector_", 24); _visitor.accept(optional_vector_);
	_visitor.template type_end<TestValue>(25);
}


} // namespace vnx
} // namespace test


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_test_TestValue_HXX_
