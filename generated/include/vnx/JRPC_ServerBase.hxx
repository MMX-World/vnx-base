
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_JRPC_ServerBase_HXX_
#define INCLUDE_vnx_JRPC_ServerBase_HXX_

#include <vnx/package.hxx>
#include <vnx/BaseServer.h>


namespace vnx {

class JRPC_ServerBase : public ::vnx::BaseServer {
public:
	
	
	typedef ::vnx::BaseServer Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x86e4e6480e8448adull;
	
	JRPC_ServerBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const JRPC_ServerBase& _value);
	friend std::istream& operator>>(std::istream& _in, JRPC_ServerBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};

template<typename T>
void JRPC_ServerBase::accept_generic(T& _visitor) const {
	_visitor.template type_begin<JRPC_ServerBase>(9);
	_visitor.type_field("address", 0); _visitor.accept(address);
	_visitor.type_field("allow_login", 1); _visitor.accept(allow_login);
	_visitor.type_field("use_authentication", 2); _visitor.accept(use_authentication);
	_visitor.type_field("export_list", 3); _visitor.accept(export_list);
	_visitor.type_field("max_queue_ms", 4); _visitor.accept(max_queue_ms);
	_visitor.type_field("max_queue_size", 5); _visitor.accept(max_queue_size);
	_visitor.type_field("recv_buffer_size", 6); _visitor.accept(recv_buffer_size);
	_visitor.type_field("send_buffer_size", 7); _visitor.accept(send_buffer_size);
	_visitor.type_field("default_access", 8); _visitor.accept(default_access);
	_visitor.template type_end<JRPC_ServerBase>(9);
}


} // namespace vnx


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_JRPC_ServerBase_HXX_
