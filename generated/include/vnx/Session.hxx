
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_Session_HXX_
#define INCLUDE_vnx_Session_HXX_

#include <vnx/package.hxx>
#include <vnx/Hash64.hpp>
#include <vnx/Value.h>
#include <vnx/permission_e.hxx>


namespace vnx {

class VNX_EXPORT Session : public ::vnx::Value {
public:
	
	::vnx::Hash64 id;
	std::string user;
	std::set<std::string> permissions;
	int64_t login_time = 0;
	
	typedef ::vnx::Value Super;
	
	VNX_EXPORT static const vnx::Hash64 VNX_TYPE_HASH;
	VNX_EXPORT static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xe7e70e14f9c9db05ull;
	
	Session() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual vnx::bool_t is_anonymous() const;
	virtual vnx::bool_t has_permission(const std::string& perm = "") const;
	virtual vnx::bool_t has_permission_vnx(const ::vnx::permission_e& perm = ::vnx::permission_e()) const;
	
	static std::shared_ptr<Session> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const Session& _value);
	friend std::istream& operator>>(std::istream& _in, Session& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void Session::accept_generic(T& _visitor) const {
	_visitor.template type_begin<Session>(4);
	_visitor.type_field("id", 0); _visitor.accept(id);
	_visitor.type_field("user", 1); _visitor.accept(user);
	_visitor.type_field("permissions", 2); _visitor.accept(permissions);
	_visitor.type_field("login_time", 3); _visitor.accept(login_time);
	_visitor.template type_end<Session>(4);
}


} // namespace vnx


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_Session_HXX_
