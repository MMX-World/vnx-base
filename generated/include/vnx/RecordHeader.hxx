
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_RecordHeader_HXX_
#define INCLUDE_vnx_RecordHeader_HXX_

#include <vnx/package.hxx>
#include <vnx/Value.h>
#include <vnx/record_topic_info_t.hxx>


namespace vnx {

class VNX_EXPORT RecordHeader : public ::vnx::Value {
public:
	
	std::string filename;
	uint32_t header_size = 0;
	uint32_t block_size = 0;
	int64_t begin_time = 0;
	int64_t end_time = 0;
	int64_t num_bytes = 0;
	int64_t num_samples = 0;
	int64_t num_samples_lost = 0;
	std::vector<int64_t> markers;
	std::vector<int64_t> type_code_positions;
	std::vector<::vnx::record_topic_info_t> topics;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x38eef92562acfa98ull;
	
	RecordHeader() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	static std::shared_ptr<RecordHeader> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const RecordHeader& _value);
	friend std::istream& operator>>(std::istream& _in, RecordHeader& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void RecordHeader::accept_generic(T& _visitor) const {
	_visitor.template type_begin<RecordHeader>(11);
	_visitor.type_field("filename", 0); _visitor.accept(filename);
	_visitor.type_field("header_size", 1); _visitor.accept(header_size);
	_visitor.type_field("block_size", 2); _visitor.accept(block_size);
	_visitor.type_field("begin_time", 3); _visitor.accept(begin_time);
	_visitor.type_field("end_time", 4); _visitor.accept(end_time);
	_visitor.type_field("num_bytes", 5); _visitor.accept(num_bytes);
	_visitor.type_field("num_samples", 6); _visitor.accept(num_samples);
	_visitor.type_field("num_samples_lost", 7); _visitor.accept(num_samples_lost);
	_visitor.type_field("markers", 8); _visitor.accept(markers);
	_visitor.type_field("type_code_positions", 9); _visitor.accept(type_code_positions);
	_visitor.type_field("topics", 10); _visitor.accept(topics);
	_visitor.template type_end<RecordHeader>(11);
}


} // namespace vnx


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_RecordHeader_HXX_
