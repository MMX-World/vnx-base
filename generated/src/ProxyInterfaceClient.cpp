
// AUTO GENERATED by vnxcppcodegen

#include <vnx/package.hxx>
#include <vnx/ProxyInterfaceClient.hxx>
#include <vnx/Hash64.hpp>
#include <vnx/ProxyInterface_disable_export.hxx>
#include <vnx/ProxyInterface_disable_export_return.hxx>
#include <vnx/ProxyInterface_disable_forward.hxx>
#include <vnx/ProxyInterface_disable_forward_return.hxx>
#include <vnx/ProxyInterface_disable_import.hxx>
#include <vnx/ProxyInterface_disable_import_return.hxx>
#include <vnx/ProxyInterface_disable_tunnel.hxx>
#include <vnx/ProxyInterface_disable_tunnel_return.hxx>
#include <vnx/ProxyInterface_enable_export.hxx>
#include <vnx/ProxyInterface_enable_export_return.hxx>
#include <vnx/ProxyInterface_enable_forward.hxx>
#include <vnx/ProxyInterface_enable_forward_return.hxx>
#include <vnx/ProxyInterface_enable_import.hxx>
#include <vnx/ProxyInterface_enable_import_return.hxx>
#include <vnx/ProxyInterface_enable_tunnel.hxx>
#include <vnx/ProxyInterface_enable_tunnel_return.hxx>
#include <vnx/ProxyInterface_login.hxx>
#include <vnx/ProxyInterface_login_return.hxx>
#include <vnx/ProxyInterface_on_connect.hxx>
#include <vnx/ProxyInterface_on_connect_return.hxx>
#include <vnx/ProxyInterface_on_disconnect.hxx>
#include <vnx/ProxyInterface_on_disconnect_return.hxx>
#include <vnx/ProxyInterface_on_login.hxx>
#include <vnx/ProxyInterface_on_login_return.hxx>
#include <vnx/ProxyInterface_on_remote_connect.hxx>
#include <vnx/ProxyInterface_on_remote_connect_return.hxx>
#include <vnx/ProxyInterface_on_remote_login.hxx>
#include <vnx/ProxyInterface_on_remote_login_return.hxx>
#include <vnx/ProxyInterface_wait_on_connect.hxx>
#include <vnx/ProxyInterface_wait_on_connect_return.hxx>
#include <vnx/ProxyInterface_wait_on_disconnect.hxx>
#include <vnx/ProxyInterface_wait_on_disconnect_return.hxx>
#include <vnx/Session.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace vnx {

ProxyInterfaceClient::ProxyInterfaceClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

ProxyInterfaceClient::ProxyInterfaceClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

std::shared_ptr<const ::vnx::Session> ProxyInterfaceClient::login(const std::string& name, const std::string& password) {
	auto _method = ::vnx::ProxyInterface_login::create();
	_method->name = name;
	_method->password = password;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ProxyInterface_login_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::Session>>();
	} else {
		throw std::logic_error("ProxyInterfaceClient: invalid return value");
	}
}

void ProxyInterfaceClient::enable_import(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_enable_import::create();
	_method->topic_name = topic_name;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::enable_import_async(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_enable_import::create();
	_method->topic_name = topic_name;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::disable_import(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_disable_import::create();
	_method->topic_name = topic_name;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::disable_import_async(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_disable_import::create();
	_method->topic_name = topic_name;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::enable_export(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_enable_export::create();
	_method->topic_name = topic_name;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::enable_export_async(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_enable_export::create();
	_method->topic_name = topic_name;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::disable_export(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_disable_export::create();
	_method->topic_name = topic_name;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::disable_export_async(const std::string& topic_name) {
	auto _method = ::vnx::ProxyInterface_disable_export::create();
	_method->topic_name = topic_name;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::enable_forward(const std::string& service_name, const int32_t& max_queue_ms, const int32_t& max_queue_size) {
	auto _method = ::vnx::ProxyInterface_enable_forward::create();
	_method->service_name = service_name;
	_method->max_queue_ms = max_queue_ms;
	_method->max_queue_size = max_queue_size;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::enable_forward_async(const std::string& service_name, const int32_t& max_queue_ms, const int32_t& max_queue_size) {
	auto _method = ::vnx::ProxyInterface_enable_forward::create();
	_method->service_name = service_name;
	_method->max_queue_ms = max_queue_ms;
	_method->max_queue_size = max_queue_size;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::disable_forward(const std::string& service_name) {
	auto _method = ::vnx::ProxyInterface_disable_forward::create();
	_method->service_name = service_name;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::disable_forward_async(const std::string& service_name) {
	auto _method = ::vnx::ProxyInterface_disable_forward::create();
	_method->service_name = service_name;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::enable_tunnel(const ::vnx::Hash64& tunnel_addr, const int32_t& max_queue_ms, const int32_t& max_queue_size) {
	auto _method = ::vnx::ProxyInterface_enable_tunnel::create();
	_method->tunnel_addr = tunnel_addr;
	_method->max_queue_ms = max_queue_ms;
	_method->max_queue_size = max_queue_size;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::enable_tunnel_async(const ::vnx::Hash64& tunnel_addr, const int32_t& max_queue_ms, const int32_t& max_queue_size) {
	auto _method = ::vnx::ProxyInterface_enable_tunnel::create();
	_method->tunnel_addr = tunnel_addr;
	_method->max_queue_ms = max_queue_ms;
	_method->max_queue_size = max_queue_size;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::disable_tunnel(const ::vnx::Hash64& tunnel_addr) {
	auto _method = ::vnx::ProxyInterface_disable_tunnel::create();
	_method->tunnel_addr = tunnel_addr;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::disable_tunnel_async(const ::vnx::Hash64& tunnel_addr) {
	auto _method = ::vnx::ProxyInterface_disable_tunnel::create();
	_method->tunnel_addr = tunnel_addr;
	vnx_request(_method, true);
}

::vnx::Hash64 ProxyInterfaceClient::wait_on_connect() {
	auto _method = ::vnx::ProxyInterface_wait_on_connect::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ProxyInterface_wait_on_connect_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Hash64>();
	} else {
		throw std::logic_error("ProxyInterfaceClient: invalid return value");
	}
}

::vnx::Hash64 ProxyInterfaceClient::wait_on_disconnect() {
	auto _method = ::vnx::ProxyInterface_wait_on_disconnect::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ProxyInterface_wait_on_disconnect_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Hash64>();
	} else {
		throw std::logic_error("ProxyInterfaceClient: invalid return value");
	}
}

void ProxyInterfaceClient::on_connect() {
	auto _method = ::vnx::ProxyInterface_on_connect::create();
	vnx_request(_method, false);
}

void ProxyInterfaceClient::on_connect_async() {
	auto _method = ::vnx::ProxyInterface_on_connect::create();
	vnx_request(_method, true);
}

void ProxyInterfaceClient::on_disconnect() {
	auto _method = ::vnx::ProxyInterface_on_disconnect::create();
	vnx_request(_method, false);
}

void ProxyInterfaceClient::on_disconnect_async() {
	auto _method = ::vnx::ProxyInterface_on_disconnect::create();
	vnx_request(_method, true);
}

void ProxyInterfaceClient::on_remote_connect(const ::vnx::Hash64& process_id) {
	auto _method = ::vnx::ProxyInterface_on_remote_connect::create();
	_method->process_id = process_id;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::on_remote_connect_async(const ::vnx::Hash64& process_id) {
	auto _method = ::vnx::ProxyInterface_on_remote_connect::create();
	_method->process_id = process_id;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::on_login(const std::string& name, const std::string& password) {
	auto _method = ::vnx::ProxyInterface_on_login::create();
	_method->name = name;
	_method->password = password;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::on_login_async(const std::string& name, const std::string& password) {
	auto _method = ::vnx::ProxyInterface_on_login::create();
	_method->name = name;
	_method->password = password;
	vnx_request(_method, true);
}

void ProxyInterfaceClient::on_remote_login(std::shared_ptr<const ::vnx::Session> remote_session) {
	auto _method = ::vnx::ProxyInterface_on_remote_login::create();
	_method->remote_session = remote_session;
	vnx_request(_method, false);
}

void ProxyInterfaceClient::on_remote_login_async(std::shared_ptr<const ::vnx::Session> remote_session) {
	auto _method = ::vnx::ProxyInterface_on_remote_login::create();
	_method->remote_session = remote_session;
	vnx_request(_method, true);
}


} // namespace vnx
