
// AUTO GENERATED by vnxcppcodegen

#include <vnx/package.hxx>
#include <vnx/ProcessClient.hxx>
#include <vnx/LogMsg.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInfo.hxx>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/Process_get_global_config.hxx>
#include <vnx/Process_get_global_config_return.hxx>
#include <vnx/Process_get_module_info.hxx>
#include <vnx/Process_get_module_info_return.hxx>
#include <vnx/Process_get_name.hxx>
#include <vnx/Process_get_name_return.hxx>
#include <vnx/Process_get_process_info.hxx>
#include <vnx/Process_get_process_info_return.hxx>
#include <vnx/Process_get_sync_time.hxx>
#include <vnx/Process_get_sync_time_return.hxx>
#include <vnx/Process_get_topic_info.hxx>
#include <vnx/Process_get_topic_info_return.hxx>
#include <vnx/Process_grep_log.hxx>
#include <vnx/Process_grep_log_return.hxx>
#include <vnx/Process_journal_log.hxx>
#include <vnx/Process_journal_log_return.hxx>
#include <vnx/Process_pause_log.hxx>
#include <vnx/Process_pause_log_return.hxx>
#include <vnx/Process_reload_config.hxx>
#include <vnx/Process_reload_config_return.hxx>
#include <vnx/Process_resume_log.hxx>
#include <vnx/Process_resume_log_return.hxx>
#include <vnx/Process_self_test_all.hxx>
#include <vnx/Process_self_test_all_return.hxx>
#include <vnx/Process_set_debug.hxx>
#include <vnx/Process_set_debug_return.hxx>
#include <vnx/Process_set_global_config.hxx>
#include <vnx/Process_set_global_config_return.hxx>
#include <vnx/Process_show_error_log.hxx>
#include <vnx/Process_show_error_log_return.hxx>
#include <vnx/Process_trigger_shutdown.hxx>
#include <vnx/Process_trigger_shutdown_return.hxx>
#include <vnx/Process_ungrep_log.hxx>
#include <vnx/Process_ungrep_log_return.hxx>
#include <vnx/ProcessInfo.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/TimeSync.hxx>
#include <vnx/TopicInfo.hxx>
#include <vnx/Variant.hpp>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace vnx {

ProcessClient::ProcessClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

ProcessClient::ProcessClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::Object ProcessClient::vnx_get_config_object() {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

::vnx::Variant ProcessClient::vnx_get_config(const std::string& name) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

void ProcessClient::vnx_set_config_object(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, false);
}

void ProcessClient::vnx_set_config_object_async(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, true);
}

void ProcessClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, false);
}

void ProcessClient::vnx_set_config_async(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, true);
}

::vnx::TypeCode ProcessClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::TypeCode>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::ModuleInfo> ProcessClient::vnx_get_module_info() {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

void ProcessClient::vnx_restart() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, false);
}

void ProcessClient::vnx_restart_async() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, true);
}

void ProcessClient::vnx_stop() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, false);
}

void ProcessClient::vnx_stop_async() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, true);
}

vnx::bool_t ProcessClient::vnx_self_test() {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::bool_t>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

std::string ProcessClient::get_name() {
	auto _method = ::vnx::Process_get_name::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_name_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::string>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

::vnx::TimeSync ProcessClient::get_sync_time() {
	auto _method = ::vnx::Process_get_sync_time::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_sync_time_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::TimeSync>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

std::vector<::vnx::TopicInfo> ProcessClient::get_topic_info(const vnx::bool_t& include_domains) {
	auto _method = ::vnx::Process_get_topic_info::create();
	_method->include_domains = include_domains;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_topic_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::vnx::TopicInfo>>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

std::vector<::vnx::ModuleInfo> ProcessClient::get_module_info() {
	auto _method = ::vnx::Process_get_module_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_module_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::vnx::ModuleInfo>>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

::vnx::ProcessInfo ProcessClient::get_process_info() {
	auto _method = ::vnx::Process_get_process_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_process_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::ProcessInfo>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

::vnx::Variant ProcessClient::get_global_config(const std::string& key) {
	auto _method = ::vnx::Process_get_global_config::create();
	_method->key = key;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::Process_get_global_config_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("ProcessClient: invalid return value");
	}
}

void ProcessClient::set_global_config(const std::string& key, const ::vnx::Variant& value) {
	auto _method = ::vnx::Process_set_global_config::create();
	_method->key = key;
	_method->value = value;
	vnx_request(_method, false);
}

void ProcessClient::set_global_config_async(const std::string& key, const ::vnx::Variant& value) {
	auto _method = ::vnx::Process_set_global_config::create();
	_method->key = key;
	_method->value = value;
	vnx_request(_method, true);
}

void ProcessClient::reload_config() {
	auto _method = ::vnx::Process_reload_config::create();
	vnx_request(_method, false);
}

void ProcessClient::reload_config_async() {
	auto _method = ::vnx::Process_reload_config::create();
	vnx_request(_method, true);
}

void ProcessClient::pause_log() {
	auto _method = ::vnx::Process_pause_log::create();
	vnx_request(_method, false);
}

void ProcessClient::pause_log_async() {
	auto _method = ::vnx::Process_pause_log::create();
	vnx_request(_method, true);
}

void ProcessClient::resume_log() {
	auto _method = ::vnx::Process_resume_log::create();
	vnx_request(_method, false);
}

void ProcessClient::resume_log_async() {
	auto _method = ::vnx::Process_resume_log::create();
	vnx_request(_method, true);
}

void ProcessClient::set_debug(const int32_t& level) {
	auto _method = ::vnx::Process_set_debug::create();
	_method->level = level;
	vnx_request(_method, false);
}

void ProcessClient::set_debug_async(const int32_t& level) {
	auto _method = ::vnx::Process_set_debug::create();
	_method->level = level;
	vnx_request(_method, true);
}

void ProcessClient::show_error_log() {
	auto _method = ::vnx::Process_show_error_log::create();
	vnx_request(_method, false);
}

void ProcessClient::show_error_log_async() {
	auto _method = ::vnx::Process_show_error_log::create();
	vnx_request(_method, true);
}

void ProcessClient::grep_log(const std::string& expr) {
	auto _method = ::vnx::Process_grep_log::create();
	_method->expr = expr;
	vnx_request(_method, false);
}

void ProcessClient::grep_log_async(const std::string& expr) {
	auto _method = ::vnx::Process_grep_log::create();
	_method->expr = expr;
	vnx_request(_method, true);
}

void ProcessClient::journal_log(const std::string& expr) {
	auto _method = ::vnx::Process_journal_log::create();
	_method->expr = expr;
	vnx_request(_method, false);
}

void ProcessClient::journal_log_async(const std::string& expr) {
	auto _method = ::vnx::Process_journal_log::create();
	_method->expr = expr;
	vnx_request(_method, true);
}

void ProcessClient::ungrep_log() {
	auto _method = ::vnx::Process_ungrep_log::create();
	vnx_request(_method, false);
}

void ProcessClient::ungrep_log_async() {
	auto _method = ::vnx::Process_ungrep_log::create();
	vnx_request(_method, true);
}

void ProcessClient::trigger_shutdown() {
	auto _method = ::vnx::Process_trigger_shutdown::create();
	vnx_request(_method, false);
}

void ProcessClient::trigger_shutdown_async() {
	auto _method = ::vnx::Process_trigger_shutdown::create();
	vnx_request(_method, true);
}

void ProcessClient::self_test_all() {
	auto _method = ::vnx::Process_self_test_all::create();
	vnx_request(_method, false);
}

void ProcessClient::self_test_all_async() {
	auto _method = ::vnx::Process_self_test_all::create();
	vnx_request(_method, true);
}


} // namespace vnx
